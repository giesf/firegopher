{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is firegopher? Firegopher is a toolchain for easily running Firecracker MicroVMs on a Linux host. The project currently consists of an installer, a tool to start MicroVMs in a jailed environment and a very basic init system that is used to run simple web applications inside of the MicroVMs. The project is in its very early stages and has currently very little use outside of teaching its creator a lot about operating systems, golang and how Firecracker works. This being said, it might also be an interesting starting point for others looking into integrating Firecracker. This project is not meant to be used in production environments. You can read more about this under Known Limitations .","title":"What is firegopher?"},{"location":"#what-is-firegopher","text":"Firegopher is a toolchain for easily running Firecracker MicroVMs on a Linux host. The project currently consists of an installer, a tool to start MicroVMs in a jailed environment and a very basic init system that is used to run simple web applications inside of the MicroVMs. The project is in its very early stages and has currently very little use outside of teaching its creator a lot about operating systems, golang and how Firecracker works. This being said, it might also be an interesting starting point for others looking into integrating Firecracker. This project is not meant to be used in production environments. You can read more about this under Known Limitations .","title":"What is firegopher?"},{"location":"1-getting-started/","text":"Getting Started Firegopher is a toolchain for easily running Firecracker MicroVMs on a Linux host. The following guide will walk you through running your first micro VM. It assumes that you are using a more or less blank Linux host. Prerequisites Firegopher currently only officially supports Ubuntu Jammy Jellyfish as a host operating system. This is mostly due to the fact that firegopher depends on debugfs >=1.46.5 . In general firegopher only works on linux as it uses Firecracker which uses KVM . Installing firegopher To install firegopher run the install script from the website. curl -fsSL https://firegopher.dev/install | bash Downloading assets and additional dependencies Firegopher needs a kernel and root filesystem for its VMs and also a version of Firecracker (including Jailer) to run them. To make the installation of these dependencies easier firegopher comes with a bootstrap command that installs them. sudo fgoph bootstrap Run your first VM You can download an example app.zip file to use for demo purposes wget https://firegopher.dev/example-app.zip To run the example application use sudo fgoph run --app=\"example-app.zip\" --exec=\"python3 app.py\" The command output should tell you the virtual IP that has been assigned to the VM. You can try sending a request to the app by running the following command in a new terminal session: curl http://172.19.0.2:8000 (The IP might be different depending on what IPs are still available for asignment on your host machine)","title":"Getting Started"},{"location":"1-getting-started/#getting-started","text":"Firegopher is a toolchain for easily running Firecracker MicroVMs on a Linux host. The following guide will walk you through running your first micro VM. It assumes that you are using a more or less blank Linux host.","title":"Getting Started"},{"location":"1-getting-started/#prerequisites","text":"Firegopher currently only officially supports Ubuntu Jammy Jellyfish as a host operating system. This is mostly due to the fact that firegopher depends on debugfs >=1.46.5 . In general firegopher only works on linux as it uses Firecracker which uses KVM .","title":"Prerequisites"},{"location":"1-getting-started/#installing-firegopher","text":"To install firegopher run the install script from the website. curl -fsSL https://firegopher.dev/install | bash","title":"Installing firegopher"},{"location":"1-getting-started/#downloading-assets-and-additional-dependencies","text":"Firegopher needs a kernel and root filesystem for its VMs and also a version of Firecracker (including Jailer) to run them. To make the installation of these dependencies easier firegopher comes with a bootstrap command that installs them. sudo fgoph bootstrap","title":"Downloading assets and additional dependencies"},{"location":"1-getting-started/#run-your-first-vm","text":"You can download an example app.zip file to use for demo purposes wget https://firegopher.dev/example-app.zip To run the example application use sudo fgoph run --app=\"example-app.zip\" --exec=\"python3 app.py\" The command output should tell you the virtual IP that has been assigned to the VM. You can try sending a request to the app by running the following command in a new terminal session: curl http://172.19.0.2:8000 (The IP might be different depending on what IPs are still available for asignment on your host machine)","title":"Run your first VM"},{"location":"2-user-guide/","text":"User Guide Networking Operating systems Persistent storage","title":"User Guide"},{"location":"2-user-guide/#user-guide","text":"","title":"User Guide"},{"location":"2-user-guide/#networking","text":"","title":"Networking"},{"location":"2-user-guide/#operating-systems","text":"","title":"Operating systems"},{"location":"2-user-guide/#persistent-storage","text":"","title":"Persistent storage"},{"location":"3-architecture/","text":"Architecture The firegopher project is made up of three main parts: The VM Runner , which prepares the host system and starts the guest VM The Guest Init System , which runs inside of the guest VM and starts the user workload A set of customised root filesystems ( Base Images ) to be used for the guest VM and an Asset Manager to install and manage them VM Runner The VM Runner has four main responsibilities: It prepares the root file system for the guest VM by unpacking the user assets into a copy of the chosen Base Image and creating a configuration file that instructs the Guest Init System on what to do with them It prepares the Firecracker Jail by first creating a directory that will later be used by the Firecracker Jailer as a CHROOT root directory and copying/hardlinking all the assets that are needed to run the guest VM into it It creates and configures the network device needed for the guest VM It starts the jailed Firecracker process and supervises it Guest Init System The Guest Init System is a barebones init system specifically designed to run a single application inside of a VM. At its core it is a go-rewrite of fly-init-snapshot . The main responsibilities of the guest init system are: reading the configuration passed to it from the VM Runner mounting the root file system mounting all the required device files configuring the network interface dropping root privileges starting the user workload and supervising it Asset Manager The Asset Manager is currently in the early stages of its development. In its current state it is little more than a glorified download script. It downloads the following assets: A Linux Kernel Image A specific version of Firecracker (currently 1.6.0) A modified version of the Ubuntu 22.04 root file system Base Images Currently there is only one officially supported base image available to be used with firegopher. It is a slightly modified version of Ubuntu 22.04 Minimal . The modifications that are currently done to create the finished base image are: Installing ca-certificates , curl and python3 Clearing out the existing package lists afterwards by deleting all files in /var/lib/apt/lists/ The current base image creation process is heavily based on the process outlined by the Firecracker team here . Networking The current networking setup is in its very early-stages and should not be considered stable. Firegopher is designed to be used with a reverse proxy on the host machine that routes incoming traffic to the different running microVMs. In the future Firegopher will automatically configure a reverse proxy based on the users needs. Currently users need to configure a reverse proxy manually. Currently every microVM is automatically assigned a non-internet-routable IP in the range 172.19.0.0/16. The host system is instructed to forward all traffic from the microVM to the internet.","title":"Architecture"},{"location":"3-architecture/#architecture","text":"The firegopher project is made up of three main parts: The VM Runner , which prepares the host system and starts the guest VM The Guest Init System , which runs inside of the guest VM and starts the user workload A set of customised root filesystems ( Base Images ) to be used for the guest VM and an Asset Manager to install and manage them","title":"Architecture"},{"location":"3-architecture/#vm-runner","text":"The VM Runner has four main responsibilities: It prepares the root file system for the guest VM by unpacking the user assets into a copy of the chosen Base Image and creating a configuration file that instructs the Guest Init System on what to do with them It prepares the Firecracker Jail by first creating a directory that will later be used by the Firecracker Jailer as a CHROOT root directory and copying/hardlinking all the assets that are needed to run the guest VM into it It creates and configures the network device needed for the guest VM It starts the jailed Firecracker process and supervises it","title":"VM Runner"},{"location":"3-architecture/#guest-init-system","text":"The Guest Init System is a barebones init system specifically designed to run a single application inside of a VM. At its core it is a go-rewrite of fly-init-snapshot . The main responsibilities of the guest init system are: reading the configuration passed to it from the VM Runner mounting the root file system mounting all the required device files configuring the network interface dropping root privileges starting the user workload and supervising it","title":"Guest Init System"},{"location":"3-architecture/#asset-manager","text":"The Asset Manager is currently in the early stages of its development. In its current state it is little more than a glorified download script. It downloads the following assets: A Linux Kernel Image A specific version of Firecracker (currently 1.6.0) A modified version of the Ubuntu 22.04 root file system","title":"Asset Manager"},{"location":"3-architecture/#base-images","text":"Currently there is only one officially supported base image available to be used with firegopher. It is a slightly modified version of Ubuntu 22.04 Minimal . The modifications that are currently done to create the finished base image are: Installing ca-certificates , curl and python3 Clearing out the existing package lists afterwards by deleting all files in /var/lib/apt/lists/ The current base image creation process is heavily based on the process outlined by the Firecracker team here .","title":"Base Images"},{"location":"3-architecture/#networking","text":"The current networking setup is in its very early-stages and should not be considered stable. Firegopher is designed to be used with a reverse proxy on the host machine that routes incoming traffic to the different running microVMs. In the future Firegopher will automatically configure a reverse proxy based on the users needs. Currently users need to configure a reverse proxy manually. Currently every microVM is automatically assigned a non-internet-routable IP in the range 172.19.0.0/16. The host system is instructed to forward all traffic from the microVM to the internet.","title":"Networking"},{"location":"4-known-limitations/","text":"Known limitations Resource usage Networking Scheduling","title":"Known limitations"},{"location":"4-known-limitations/#known-limitations","text":"","title":"Known limitations"},{"location":"4-known-limitations/#resource-usage","text":"","title":"Resource usage"},{"location":"4-known-limitations/#networking","text":"","title":"Networking"},{"location":"4-known-limitations/#scheduling","text":"","title":"Scheduling"},{"location":"5-roadmap/","text":"Roadmap","title":"Roadmap"},{"location":"5-roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"6-contributing/","text":"Contributing","title":"Contributing"},{"location":"6-contributing/#contributing","text":"","title":"Contributing"}]}